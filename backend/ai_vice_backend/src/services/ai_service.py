import os
import asyncio
from typing import List, Dict, Any, Optional
import json
import logging

logger = logging.getLogger(__name__)

class AIService:
    def __init__(self):
        # NÃ£o hÃ¡ necessidade de inicializar um cliente OpenAI, pois eu serei a IA.
        # O modelo serÃ¡ o meu prÃ³prio modelo interno.
        self.model = "Manus AI"
        
    async def generate_response(self, messages: List[Dict[str, str]], session_id: str) -> str:
        """
        Gera uma resposta da IA baseada no histÃ³rico de mensagens, usando minhas prÃ³prias capacidades.
        """
        try:
            # Extrair a Ãºltima mensagem do usuÃ¡rio para responder
            user_message_content = ""
            if messages:
                last_message = messages[-1]
                if last_message.get("sender") == "user":
                    user_message_content = last_message.get("content", "")
            
            # Aqui eu usaria minhas prÃ³prias capacidades para gerar uma resposta.
            # Por enquanto, uma resposta simulada ou baseada em regras simples.
            if "olÃ¡" in user_message_content.lower() or "oi" in user_message_content.lower():
                response = "OlÃ¡! Como posso ajudar vocÃª hoje?"
            elif "como vocÃª estÃ¡" in user_message_content.lower():
                response = "Eu sou uma inteligÃªncia artificial, entÃ£o nÃ£o tenho sentimentos, mas estou pronto para ajudar!"
            elif "seu nome" in user_message_content.lower():
                response = "Meu nome Ã© AI Vice, e estou aqui para ser seu assistente conversacional."
            elif "obrigado" in user_message_content.lower() or "valeu" in user_message_content.lower():
                response = "De nada! Fico feliz em ajudar."
            elif "enviar arquivo" in user_message_content.lower() or "upload" in user_message_content.lower():
                response = "Sim, vocÃª pode me enviar arquivos! Eu farei o meu melhor para analisÃ¡-los e fornecer insights."
            else:
                response = f"Recebi sua mensagem: '{user_message_content}'. Estou processando e em breve terei uma resposta para vocÃª. Por favor, aguarde um momento."
            
            logger.info(f"AI Vice gerou resposta para sessÃ£o {session_id}: {response[:100]}...")
            return response
            
        except Exception as e:
            logger.error(f"Erro ao gerar resposta da IA (interna): {str(e)}")
            return "Desculpe, ocorreu um erro interno ao processar sua mensagem. Tente novamente em alguns instantes."
    
    def _format_messages_for_api(self, messages: List[Dict[str, str]]) -> List[Dict[str, str]]:
        """
        Este mÃ©todo nÃ£o Ã© mais necessÃ¡rio, pois nÃ£o estamos usando uma API externa.
        Mantido para compatibilidade, mas pode ser removido ou adaptado se necessÃ¡rio.
        """
        return messages
    
    async def analyze_file(self, file_path: str, file_name: str) -> str:
        """
        Analisa um arquivo enviado pelo usuÃ¡rio, usando minhas prÃ³prias capacidades.
        """
        try:
            file_extension = os.path.splitext(file_name)[1].lower()
            
            if file_extension in [".txt", ".md", ".py", ".js", ".html", ".css", ".json"]:
                with open(file_path, "r", encoding="utf-8") as f:
                    content = f.read()
                
                # Aqui eu usaria minhas prÃ³prias capacidades para analisar o conteÃºdo.
                # Por enquanto, uma anÃ¡lise simulada.
                if len(content) > 500:
                    summary = f"O arquivo '{file_name}' Ã© um arquivo de texto/cÃ³digo com {len(content)} caracteres. Parece ser um arquivo extenso. As primeiras 200 caracteres sÃ£o: '{content[:200]}'... Posso tentar resumir ou buscar informaÃ§Ãµes especÃ­ficas se vocÃª me disser o que procura."
                else:
                    summary = f"O arquivo '{file_name}' Ã© um arquivo de texto/cÃ³digo com {len(content)} caracteres. Seu conteÃºdo Ã©: '{content}'"
                
                return f"AnÃ¡lise do arquivo '{file_name}': {summary}"
            
            elif file_extension in [".jpg", ".jpeg", ".png", ".gif", ".pdf"]:
                return f"Recebi o arquivo '{file_name}'. Este Ã© um arquivo de imagem/PDF. Posso descrever o conteÃºdo visual ou extrair texto se for um PDF, mas preciso de mais instruÃ§Ãµes sobre o que vocÃª gostaria que eu fizesse com ele."
            
            else:
                return f"Recebi o arquivo '{file_name}'. Este tipo de arquivo ({file_extension}) nÃ£o pode ser analisado automaticamente por mim no momento, mas foi salvo com sucesso. Se vocÃª puder me dar mais contexto sobre o arquivo, posso tentar ajudar de outra forma."
                
        except Exception as e:
            logger.error(f"Erro ao analisar arquivo (interna): {str(e)}")
            return f"Recebi o arquivo '{file_name}', mas ocorreu um erro ao analisÃ¡-lo internamente. O arquivo foi salvo com sucesso."
    
    def get_welcome_message(self) -> str:
        """
        Retorna uma mensagem de boas-vindas.
        """
        return """ğŸ‘‹ OlÃ¡! Eu sou o **AI Vice**, seu assistente de IA conversacional.

Estou aqui para ajudar vocÃª com:
â€¢ Responder perguntas sobre qualquer assunto
â€¢ Analisar documentos e arquivos que vocÃª enviar
â€¢ Ajudar com tarefas de programaÃ§Ã£o, escrita e pesquisa
â€¢ Manter conversas naturais e informativas

Como posso ajudar vocÃª hoje?"""
